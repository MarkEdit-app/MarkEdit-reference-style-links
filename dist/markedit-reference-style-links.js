"use strict";const s=require("@codemirror/state"),g=require("@codemirror/view"),i=require("markedit-api"),k=(r,t={})=>r??t,c=k(k(i.MarkEdit.userSettings)["extension.markeditReferenceStyleLinks"]),m=c.keyboardShortcut??"Mod-k",S=c.defaultTitle??"title",p=c.defaultReference??"reference";async function y(){const r=i.MarkEdit.editorView,t=r.state,n=t.selection.main,a=(()=>{const e=t.doc.sliceString(n.from,n.to);return e.length===0?S:e})(),l=await(async()=>{const e=await i.MarkEdit.getPasteboardString();return e===void 0?"":e.match(/https?:\/\/[^\s"'`<>]+/)?.[0]??""})(),o=(()=>{const e=l.match(/^https?:\/\/(?:[\w-]+\.)*([\w-]+)(?:\.\w+)+/i);return e?e[1]:void 0})()??p,d=n.empty?a.length:0,u=d+n.to+3,f=t.doc.lineAt(n.from).to,h=d+f+t.lineBreak.length*2+o.length+5;r.dispatch({changes:[{from:n.from,to:n.to,insert:`[${a}][${o}]`},{from:f,insert:`${t.lineBreak}${t.lineBreak}[${o}]: ${l}`}],selection:s.EditorSelection.create([s.EditorSelection.range(u,u+o.length),s.EditorSelection.range(h,h+o.length)])})}i.MarkEdit.addExtension(g.keymap.of([{key:m,preventDefault:!0,run:()=>(y(),!0)}]));
